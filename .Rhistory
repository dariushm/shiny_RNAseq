add2 <- function (x,y) {
x+y
}
add2 (3,4)
above10 <- function (x) {
use <- x > 10
x[use]
}
above <- function (x,n) {
use <- x>n
x[use]
}
x <= 1:20
x <- 1:20
above10(x)
above(x,8)
columnmean <- function (y) {
nc <- ncol (y)
means <- numeric (nc)
for (i in 1:nc) {
means [i] <- means (y[,i])
}
means
}
R
q()
q()
shiny::runApp('/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm')
runApp('/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm')
runApp('/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm')
runApp('/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm')
runApp('/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm')
runApp('/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm')
runApp('/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm')
runApp('/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm')
runApp('/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm')
## Note tibble and bioconductor don't play nicely together
## Load data in 'global' chunk so it can be shared by all users of the dashboard
library(flexdashboard)
install.packages(flexdashboard)
install.packages("flexdashboard")
## Note tibble and bioconductor don't play nicely together
## Load data in 'global' chunk so it can be shared by all users of the dashboard
library(flexdashboard)
library(shiny)
library(shinyBS)
library(monocle)
library(HSMMSingleCell)
library(knitr)
library(plyr)
library(Matrix)
library(ggplot2)
library(reshape2)
library(Biobase)
library(data.table)
install.packages("data.table")
## Note tibble and bioconductor don't play nicely together
## Load data in 'global' chunk so it can be shared by all users of the dashboard
library(flexdashboard)
library(shiny)
library(shinyBS)
library(monocle)
library(HSMMSingleCell)
library(knitr)
library(plyr)
library(Matrix)
library(ggplot2)
library(reshape2)
library(Biobase)
library(data.table)
library(plotly)
install.packages("plotly")
## Note tibble and bioconductor don't play nicely together
## Load data in 'global' chunk so it can be shared by all users of the dashboard
library(flexdashboard)
library(shiny)
library(shinyBS)
library(monocle)
library(HSMMSingleCell)
library(knitr)
library(plyr)
library(Matrix)
library(ggplot2)
library(reshape2)
library(Biobase)
library(data.table)
library(plotly)
options(shiny.maxRequestSize = 100*1024^2)
#### Colors
cbs4qual = c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C")
cbs4dive = c("#CA0020", "#F4A582", "#92C5DE", "#0571B0")
tol21rainbow= c("#771155", "#AA4488", "#CC99BB", "#114477", "#4477AA", "#77AADD", "#117777", "#44AAAA", "#77CCCC", "#117744", "#44AA77", "#88CCAA", "#777711", "#AAAA44", "#DDDD77", "#774411", "#AA7744", "#DDAA77", "#771122", "#AA4455", "#DD7788")
#### Load example data ahead of time
data("HSMM_expr_matrix", "HSMM_gene_annotation", "HSMM_sample_sheet")
example_hsmm <- newCellDataSet(
as.matrix(HSMM_expr_matrix),
new("AnnotatedDataFrame", data = HSMM_sample_sheet),
new("AnnotatedDataFrame", data = HSMM_gene_annotation),
lowerDetectionLimit = 0.1,
expressionFamily = negbinomial())
## Lung
extPath <- file.path(system.file(package = "monocle"), "extdata")
load(file.path(extPath, "lung_phenotype_data.RData"))
load(file.path(extPath, "lung_exprs_data.RData"))
load(file.path(extPath, "lung_feature_data.RData"))
example_lung <- newCellDataSet(
lung_exprs_data[ , rownames(lung_phenotype_data)],
new("AnnotatedDataFrame", data = lung_phenotype_data),
new("AnnotatedDataFrame", data = lung_feature_data),
lowerDetectionLimit = 1,
expressionFamily = negbinomial.size())
cds <- example_hsmm
### Reactive values
saved_values <- reactiveValues()
saved_values$cds <- example_hsmm
### Choose dataset
selectInput("dataset", "Choose dataset:",
c("hsmm" = "hsmm",
"lung" = "lung",
"upload" = "upload"))
actionButton("go_load_data", "Load & Preview Data")
### Load data
reactive({
if (input$dataset == "hsmm") {
### HSMM example dataset
dat <- example_hsmm
} else if (input$dataset == "lung") {
### Lung example dataset
dat <- example_lung
} else if (input$dataset == "upload") {
### User data
pd_user <- reactive({
pheno <- input$phenoUser
if (is.null(pheno)) {return(NULL)}
read.csv(pheno$datapath, header = TRUE)
})
fd_user <- reactive({
feature <- input$featureUser
if (is.null(feature)) {return(NULL)}
read.csv(feature$datapath, header = TRUE)
})
exprs_user <- reactive({
exprs <- input$exprsUser
if (is.null(matrix))
return(NULL)
read.csv(matrix$datapath, header = TRUE)
})
dat <- newCellDataSet(exprs_user,
new("AnnotatedDataFrame", data = pd_user),
new("AnnotatedDataFrame", data = fd_user),
lowerDetectionLimit = 1,
expressionFamily = negbinomial.size())
}
### Estimate size factors and estimate dispersions
dat <- estimateSizeFactors(dat)
dat <- estimateDispersions(dat)
### Add total mRNA for each cell (to identify cells with low RNA or doublets)
pData(dat)$mRNA <- Matrix::colSums(exprs(dat))
### Save data
saved_values$cds <- dat
})
observeEvent(input$go_load_data, {
dat <- saved_values$cds
### Preview pheno Data
output$table_pd_preview <- renderDataTable(
data.frame(Biobase::pData(dat))
)
### Preview feature Data
if (is.null(dat$num_cells_expressed)) {
dat <- detectGenes(dat, min_expr = 0.1)
}
fdat <- Biobase::fData(dat)
output$plot_fd_preview <- renderPlot(
ggplot(fdat, aes(x = num_cells_expressed, group = biotype)) +
geom_histogram(aes(color = biotype, fill = biotype), bins = 50, alpha = 0.1) +
theme_bw() +
scale_color_manual(values = tol21rainbow[1:length(levels(fdat$biotype))]) +
scale_fill_manual(values = tol21rainbow[1:length(levels(fdat$biotype))])
)
})
plotOutput("plot_fd_preview")
dataTableOutput("table_pd_preview")
### Filter features: exclude genes expressed in few if any cells so as not to waste CPU time analyzing them for differential expression
observeEvent(input$go_filter_features, {
dat <- saved_values$cds
### FIRST: Set min value for a feature to be considered expressed.
dat <- detectGenes(dat, min_expr = input$min_expr)
### SECOND: Set min number of cells for feature to be expressed in.
expressed_genes <- rownames(subset(Biobase::fData(dat), num_cells_expressed >= input$min_cells))
### Tabulate of # features by # cells expressing it
table_num_cells_expr <- data.frame(table(Biobase::fData(dat)$num_cells_expr))
table_num_cells_expr <- table_num_cells_expr[order(table_num_cells_expr$Var1, decreasing = TRUE), ]
table_num_cells_expr$Var1 <- as.integer(table_num_cells_expr$Var1)
rownames(table_num_cells_expr) <- NULL
### Plot
plot_num_cells_expr <- ggplot(table_num_cells_expr, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = input$min_cells, color = cbs4dive[1], lwd = 1.25) +
theme_bw() +
labs(x = "Number of cells expressing feature",
y = "Features (n)")
output$plot_num_cells_expr <- renderPlot(plot_num_cells_expr)
})
### Filter cells: restrict to singlet cells by removing doublets/triplets and cell debris
observe({
dat <- saved_values$cds
pData(dat)$mRNA <- Matrix::colSums(exprs(dat))
if(is.null(input$mRNA_SD)) {
return()
}
### Add total mRNA for each cell (to identify cells with low RNA or doublets)
upper <- 10^(mean(log10(pData(dat)$mRNA)) + input$mRNA_SD*sd(log10(pData(dat)$mRNA)))
lower <- 10^(mean(log10(pData(dat)$mRNA)) - input$mRNA_SD*sd(log10(pData(dat)$mRNA)))
### Tabulate cell types
mRNA <- pData(dat)$mRNA
names(mRNA) <- rownames(pData(dat))
debris <- mRNA[mRNA < lower]
valid_cells <- mRNA[mRNA > lower & mRNA < upper]
doublet <- mRNA[mRNA > upper]
table_mRNA_filtered <- rbind.data.frame("Total" = length(mRNA),
"Singlets" = length(valid_cells),
"Doublets [filtered]" = length(double),
"Debris [filtered]" = length(debris))
names(table_mRNA_filtered) <- "Number of Cells"
saved_values$table_mRNA_filtered <- table_mRNA_filtered
### Add Singlet (valid_cells) column to pData, for plotting/filtering
pData(dat)$valid_cells <- ifelse(rownames(pData(dat)) %in% names(valid_cells), TRUE, FALSE)
### Plot cell total mRNA distribution
pdat <- pData(dat)
saved_values$plot_mRNA_log <- ggplot(
pdat, aes(x = mRNA/1E06, color = valid_cells, fill = valid_cells)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = lower/1E06, lwd = 1.2) +
geom_vline(xintercept = upper/1E06, lwd = 1.2) +
theme_bw() +
scale_color_manual(values = cbs4dive[c(1,4)]) +
scale_fill_manual(values = cbs4dive[c(1,4)]) +
labs(x = "Total mRNA of Cell (Millions)", y = "Density",
title = "Total mRNA Distribution (unfiltered)")
### Save
saved_values$cds <- dat
})
output$table_mRNA_filtered <- renderTable(saved_values$table_mRNA_filtered)
setwd("/Volumes/Storage/madarek/CV_jobs_recom/job_2016_2017/companies/DataAppPrototyping/shiny/gg_dm")
runApp()
library(shinyjs)
install.packages("shinyjs")
runApp()
?               shinyjs::useShinyjs(),
?               shinyjs::useShinyjs()
?               shinyjs::useShinyjs
runApp()
runApp()
runApp()
runApp()
